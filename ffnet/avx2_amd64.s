//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_f32_axpy(SB), $0-32

    MOVQ x+0(FP), DI
    MOVQ y+8(FP), SI
    MOVQ size+16(FP), DX
    MOVQ alpha+24(FP), CX

    LONG $0x08fa8348             // cmp    rdx, 8
	JB LBB0_5
    LONG $0x187de2c4; BYTE $0xc8 // vbroadcastss    ymm1, xmm0
    LONG $0xf8428d48             // lea    rax, [rdx - 8]
    WORD $0x8949; BYTE $0xc0     // mov    r8, rax
    LONG $0x03e8c149             // shr    r8, 3
    WORD $0xff49; BYTE $0xc0     // inc    r8
    LONG $0x08f88348             // cmp    rax, 8
	JAE LBB0_12
    WORD $0xc931                 // xor    ecx, ecx
	JMP LBB0_3
LBB0_12:
    WORD $0x894c; BYTE $0xc0     // mov    rax, r8
    LONG $0xfee08348             // and    rax, -2
    WORD $0xc931                 // xor    ecx, ecx
LBB0_13:
    LONG $0x1410fcc5; BYTE $0x8f // vmovups    ymm2, yword [rdi + 4*rcx]
    LONG $0xa875e2c4; WORD $0x8e14 // vfmadd213ps    ymm2, ymm1, yword [rsi + 4*rcx]
    LONG $0x1411fcc5; BYTE $0x8e // vmovups    yword [rsi + 4*rcx], ymm2
    LONG $0x5410fcc5; WORD $0x208f // vmovups    ymm2, yword [rdi + 4*rcx + 32]
    LONG $0xa875e2c4; WORD $0x8e54; BYTE $0x20 // vfmadd213ps    ymm2, ymm1, yword [rsi + 4*rcx + 32]
    LONG $0x5411fcc5; WORD $0x208e // vmovups    yword [rsi + 4*rcx + 32], ymm2
    LONG $0x10c18348             // add    rcx, 16
    LONG $0xfec08348             // add    rax, -2
	JNE LBB0_13
LBB0_3:
    LONG $0x01c0f641             // test    r8b, 1
	JE LBB0_5
    LONG $0x1410fcc5; BYTE $0x8f // vmovups    ymm2, yword [rdi + 4*rcx]
    LONG $0xa86de2c4; WORD $0x8e0c // vfmadd213ps    ymm1, ymm2, yword [rsi + 4*rcx]
    LONG $0x0c11fcc5; BYTE $0x8e // vmovups    yword [rsi + 4*rcx], ymm1
LBB0_5:
    WORD $0xc2f6; BYTE $0x07     // test    dl, 7
	JE LBB0_11
    WORD $0x8948; BYTE $0xd0     // mov    rax, rdx
    LONG $0xf8e08348             // and    rax, -8
    WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	JAE LBB0_11
    WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
    WORD $0xf748; BYTE $0xd1     // not    rcx
    WORD $0xc2f6; BYTE $0x01     // test    dl, 1
	JE LBB0_9
    LONG $0x0c10fac5; BYTE $0x87 // vmovss    xmm1, dword [rdi + 4*rax]
    LONG $0xa979e2c4; WORD $0x860c // vfmadd213ss    xmm1, xmm0, dword [rsi + 4*rax]
    LONG $0x0c11fac5; BYTE $0x86 // vmovss    dword [rsi + 4*rax], xmm1
    LONG $0x01c88348             // or    rax, 1
LBB0_9:
    WORD $0x0148; BYTE $0xd1     // add    rcx, rdx
	JE LBB0_11
LBB0_10:
    LONG $0x0c10fac5; BYTE $0x87 // vmovss    xmm1, dword [rdi + 4*rax]
    LONG $0xa979e2c4; WORD $0x860c // vfmadd213ss    xmm1, xmm0, dword [rsi + 4*rax]
    LONG $0x0c11fac5; BYTE $0x86 // vmovss    dword [rsi + 4*rax], xmm1
    LONG $0x4c10fac5; WORD $0x0487 // vmovss    xmm1, dword [rdi + 4*rax + 4]
    LONG $0xa979e2c4; WORD $0x864c; BYTE $0x04 // vfmadd213ss    xmm1, xmm0, dword [rsi + 4*rax + 4]
    LONG $0x4c11fac5; WORD $0x0486 // vmovss    dword [rsi + 4*rax + 4], xmm1
    LONG $0x02c08348             // add    rax, 2
    WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	JB LBB0_10
LBB0_11:
    VZEROUPPER
    RET




TEXT ·_f32_matmul(SB), $136-56

    MOVQ dst+0(FP), DI
    MOVQ m+8(FP), SI
    MOVQ n+16(FP), DX
    MOVQ mr+24(FP), CX
    MOVQ mc+32(FP), R8
    MOVQ nr+40(FP), R9
    MOVQ nc+48(FP), R10
    ADDQ $8, SP
    MOVQ R10, 120(SP)

    LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
    LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi
    LONG $0x247c8948; BYTE $0x08 // mov    qword [rsp + 8], rdi
    LONG $0x244c8948; BYTE $0x28 // mov    qword [rsp + 40], rcx
    WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE LBB1_37
    LONG $0x24448b48; BYTE $0x78 // mov    rax, qword 120[rsp] /* [rbp + 16] */
    WORD $0x07a8                 // test    al, 7
    WORD $0x950f; BYTE $0xd1     // setne    cl
    WORD $0x8949; BYTE $0xc1     // mov    r9, rax
    LONG $0xf8e18349             // and    r9, -8
    WORD $0x3949; BYTE $0xc1     // cmp    r9, rax
    WORD $0x920f; BYTE $0xd2     // setb    dl
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE LBB1_37
    WORD $0xd120                 // and    cl, dl
    LONG $0x08f88348             // cmp    rax, 8
	JB LBB1_28
    QUAD $0xfffffffffffeba49; WORD $0x3fff // mov    r10, 4611686018427387902
    WORD $0xc984                 // test    cl, cl
	JE LBB1_4
    LONG $0xf8488d48             // lea    rcx, [rax - 8]
    LONG $0x244c8948; BYTE $0x20 // mov    qword [rsp + 32], rcx
    LONG $0x03e9c148             // shr    rcx, 3
    WORD $0xff48; BYTE $0xc1     // inc    rcx
    WORD $0x894c; BYTE $0xca     // mov    rdx, r9
    WORD $0xf748; BYTE $0xd2     // not    rdx
    LONG $0x24548948; BYTE $0x30 // mov    qword [rsp + 48], rdx
    WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
    LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
    WORD $0x2149; BYTE $0xca     // and    r10, rcx
    LONG $0x2454894c; BYTE $0x68 // mov    qword [rsp + 104], r10
    WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
    LONG $0x01c98348             // or    rcx, 1
    LONG $0x244c8948; BYTE $0x60 // mov    qword [rsp + 96], rcx
    WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
    WORD $0xf748; BYTE $0xd9     // neg    rcx
    LONG $0x244c8948; BYTE $0x70 // mov    qword [rsp + 112], rcx
    LONG $0x24548b48; BYTE $0x08 // mov    rdx, qword [rsp + 8]
    LONG $0x205a8d48             // lea    rbx, [rdx + 32]
    QUAD $0x00000000853c8d4c     // lea    r15, [4*rax]
    LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
    LONG $0x20718d48             // lea    rsi, [rcx + 32]
    LONG $0x24748948; BYTE $0x50 // mov    qword [rsp + 80], rsi
    LONG $0x04c18348             // add    rcx, 4
    LONG $0x244c8948; BYTE $0x48 // mov    qword [rsp + 72], rcx
    WORD $0xff31                 // xor    edi, edi
    WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
    LONG $0x2444894c; BYTE $0x40 // mov    qword [rsp + 64], r8
	JMP LBB1_9
LBB1_21:
    LONG $0x247c8b48; BYTE $0x58 // mov    rdi, qword [rsp + 88]
    WORD $0xff48; BYTE $0xc7     // inc    rdi
    WORD $0x014c; BYTE $0xfb     // add    rbx, r15
    WORD $0x014c; BYTE $0xf9     // add    rcx, r15
    LONG $0x247c3b48; BYTE $0x28 // cmp    rdi, qword [rsp + 40]
    LONG $0x24448b4c; BYTE $0x40 // mov    r8, qword [rsp + 64]
	JE LBB1_37
LBB1_9:
    WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
    LONG $0xd0af0f48             // imul    rdx, rax
    LONG $0x24748b48; BYTE $0x08 // mov    rsi, qword [rsp + 8]
    LONG $0x96148d4c             // lea    r10, [rsi + 4*rdx]
    WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
    LONG $0x247c8948; BYTE $0x58 // mov    qword [rsp + 88], rdi
    WORD $0x8949; BYTE $0xf8     // mov    r8, rdi
    LONG $0xc2af0f4c             // imul    r8, rdx
    LONG $0x245c8b4c; BYTE $0x48 // mov    r11, qword [rsp + 72]
    LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
    WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
	JMP LBB1_10
LBB1_20:
    WORD $0xff49; BYTE $0xc6     // inc    r14
    WORD $0x014c; BYTE $0xfa     // add    rdx, r15
    WORD $0x014d; BYTE $0xfb     // add    r11, r15
    LONG $0x24743b4c; BYTE $0x40 // cmp    r14, qword [rsp + 64]
	JE LBB1_21
LBB1_10:
    WORD $0x894d; BYTE $0xf4     // mov    r12, r14
    LONG $0xe0af0f4c             // imul    r12, rax
    LONG $0x06348d4b             // lea    rsi, [r14 + r8]
    LONG $0x247c8b48; BYTE $0x38 // mov    rdi, qword [rsp + 56]
    LONG $0x187de2c4; WORD $0xb704 // vbroadcastss    ymm0, dword [rdi + 4*rsi]
    LONG $0x247c8348; WORD $0x0820 // cmp    qword [rsp + 32], 8
	JAE LBB1_12
    WORD $0x3145; BYTE $0xed     // xor    r13d, r13d
	JMP LBB1_14
LBB1_12:
    LONG $0x247c8b48; BYTE $0x68 // mov    rdi, qword [rsp + 104]
    WORD $0x3145; BYTE $0xed     // xor    r13d, r13d
LBB1_13:
    LONG $0x107ca1c4; WORD $0xaa4c; BYTE $0xe0 // vmovups    ymm1, yword [rdx + 4*r13 - 32]
    LONG $0xa87da2c4; WORD $0xab4c; BYTE $0xe0 // vfmadd213ps    ymm1, ymm0, yword [rbx + 4*r13 - 32]
    LONG $0x117ca1c4; WORD $0xab4c; BYTE $0xe0 // vmovups    yword [rbx + 4*r13 - 32], ymm1
    LONG $0x107ca1c4; WORD $0xaa0c // vmovups    ymm1, yword [rdx + 4*r13]
    LONG $0xa87da2c4; WORD $0xab0c // vfmadd213ps    ymm1, ymm0, yword [rbx + 4*r13]
    LONG $0x117ca1c4; WORD $0xab0c // vmovups    yword [rbx + 4*r13], ymm1
    LONG $0x10c58349             // add    r13, 16
    LONG $0xfec78348             // add    rdi, -2
	JNE LBB1_13
LBB1_14:
    LONG $0x24748b48; BYTE $0x10 // mov    rsi, qword [rsp + 16]
    LONG $0xa6348d4a             // lea    rsi, [rsi + 4*r12]
    LONG $0x182444f6; BYTE $0x01 // test    byte [rsp + 24], 1
	JNE LBB1_15
    WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
    WORD $0x01a8                 // test    al, 1
	JNE LBB1_17
LBB1_18:
    LONG $0x24748b48; BYTE $0x70 // mov    rsi, qword [rsp + 112]
    LONG $0x24743948; BYTE $0x30 // cmp    qword [rsp + 48], rsi
	JNE LBB1_19
	JMP LBB1_20
LBB1_15:
    LONG $0x107ca1c4; WORD $0xae0c // vmovups    ymm1, yword [rsi + 4*r13]
    LONG $0xa87d82c4; WORD $0xaa0c // vfmadd213ps    ymm1, ymm0, yword [r10 + 4*r13]
    LONG $0x117c81c4; WORD $0xaa0c // vmovups    yword [r10 + 4*r13], ymm1
    WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
    WORD $0x01a8                 // test    al, 1
	JE LBB1_18
LBB1_17:
    LONG $0x107aa1c4; WORD $0x8e0c // vmovss    xmm1, dword [rsi + 4*r9]
    LONG $0xa97982c4; WORD $0x8a0c // vfmadd213ss    xmm1, xmm0, dword [r10 + 4*r9]
    LONG $0x117a81c4; WORD $0x8a0c // vmovss    dword [r10 + 4*r9], xmm1
    LONG $0x247c8b48; BYTE $0x60 // mov    rdi, qword [rsp + 96]
    LONG $0x24748b48; BYTE $0x70 // mov    rsi, qword [rsp + 112]
    LONG $0x24743948; BYTE $0x30 // cmp    qword [rsp + 48], rsi
	JE LBB1_20
LBB1_19:
    LONG $0x107ac1c4; WORD $0xbb4c; BYTE $0xfc // vmovss    xmm1, dword [r11 + 4*rdi - 4]
    LONG $0xa979e2c4; WORD $0xb90c // vfmadd213ss    xmm1, xmm0, dword [rcx + 4*rdi]
    LONG $0x0c11fac5; BYTE $0xb9 // vmovss    dword [rcx + 4*rdi], xmm1
    LONG $0x107ac1c4; WORD $0xbb0c // vmovss    xmm1, dword [r11 + 4*rdi]
    LONG $0xa979e2c4; WORD $0xb94c; BYTE $0x04 // vfmadd213ss    xmm1, xmm0, dword [rcx + 4*rdi + 4]
    LONG $0x4c11fac5; WORD $0x04b9 // vmovss    dword [rcx + 4*rdi + 4], xmm1
    LONG $0x02c78348             // add    rdi, 2
    WORD $0x3948; BYTE $0xc7     // cmp    rdi, rax
	JB LBB1_19
	JMP LBB1_20
LBB1_28:
    WORD $0xc984                 // test    cl, cl
	JE LBB1_37
    WORD $0x894d; BYTE $0xcf     // mov    r15, r9
    WORD $0xf749; BYTE $0xd7     // not    r15
    WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
    LONG $0x01c98348             // or    rcx, 1
    LONG $0x244c8948; BYTE $0x20 // mov    qword [rsp + 32], rcx
    WORD $0x8949; BYTE $0xc4     // mov    r12, rax
    WORD $0xf749; BYTE $0xdc     // neg    r12
    QUAD $0x00000000852c8d4c     // lea    r13, [4*rax]
    LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
    LONG $0x04c18348             // add    rcx, 4
    LONG $0x244c8948; BYTE $0x30 // mov    qword [rsp + 48], rcx
    WORD $0xff31                 // xor    edi, edi
    LONG $0x24548b48; BYTE $0x08 // mov    rdx, qword [rsp + 8]
    LONG $0x245c8b4c; BYTE $0x10 // mov    r11, qword [rsp + 16]
	JMP LBB1_30
LBB1_36:
    LONG $0x247c8b48; BYTE $0x18 // mov    rdi, qword [rsp + 24]
    WORD $0xff48; BYTE $0xc7     // inc    rdi
    WORD $0x014c; BYTE $0xea     // add    rdx, r13
    LONG $0x247c3b48; BYTE $0x28 // cmp    rdi, qword [rsp + 40]
	JE LBB1_37
LBB1_30:
    WORD $0x8948; BYTE $0xf9     // mov    rcx, rdi
    LONG $0xc8af0f48             // imul    rcx, rax
    LONG $0x24748b48; BYTE $0x08 // mov    rsi, qword [rsp + 8]
    LONG $0x8e348d4c             // lea    r14, [rsi + 4*rcx]
    LONG $0x247c8948; BYTE $0x18 // mov    qword [rsp + 24], rdi
    LONG $0xf8af0f49             // imul    rdi, r8
    LONG $0x245c8b48; BYTE $0x30 // mov    rbx, qword [rsp + 48]
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
	JMP LBB1_31
LBB1_35:
    WORD $0xff49; BYTE $0xc2     // inc    r10
    WORD $0x014c; BYTE $0xeb     // add    rbx, r13
    WORD $0x394d; BYTE $0xc2     // cmp    r10, r8
	JE LBB1_36
LBB1_31:
    LONG $0x3a348d49             // lea    rsi, [r10 + rdi]
    LONG $0x244c8b48; BYTE $0x38 // mov    rcx, qword [rsp + 56]
    LONG $0x0410fac5; BYTE $0xb1 // vmovss    xmm0, dword [rcx + 4*rsi]
    WORD $0x894c; BYTE $0xce     // mov    rsi, r9
    WORD $0x01a8                 // test    al, 1
	JE LBB1_33
    WORD $0x894c; BYTE $0xd6     // mov    rsi, r10
    LONG $0xf0af0f48             // imul    rsi, rax
    LONG $0xb3348d49             // lea    rsi, [r11 + 4*rsi]
    LONG $0x107aa1c4; WORD $0x8e0c // vmovss    xmm1, dword [rsi + 4*r9]
    LONG $0xa97982c4; WORD $0x8e0c // vfmadd213ss    xmm1, xmm0, dword [r14 + 4*r9]
    LONG $0x117a81c4; WORD $0x8e0c // vmovss    dword [r14 + 4*r9], xmm1
    LONG $0x24748b48; BYTE $0x20 // mov    rsi, qword [rsp + 32]
LBB1_33:
    WORD $0x394d; BYTE $0xe7     // cmp    r15, r12
	JE LBB1_35
LBB1_34:
    LONG $0x4c10fac5; WORD $0xfcb3 // vmovss    xmm1, dword [rbx + 4*rsi - 4]
    LONG $0xa979e2c4; WORD $0xb20c // vfmadd213ss    xmm1, xmm0, dword [rdx + 4*rsi]
    LONG $0x0c11fac5; BYTE $0xb2 // vmovss    dword [rdx + 4*rsi], xmm1
    LONG $0x0c10fac5; BYTE $0xb3 // vmovss    xmm1, dword [rbx + 4*rsi]
    LONG $0xa979e2c4; WORD $0xb24c; BYTE $0x04 // vfmadd213ss    xmm1, xmm0, dword [rdx + 4*rsi + 4]
    LONG $0x4c11fac5; WORD $0x04b2 // vmovss    dword [rdx + 4*rsi + 4], xmm1
    LONG $0x02c68348             // add    rsi, 2
    WORD $0x3948; BYTE $0xc6     // cmp    rsi, rax
	JB LBB1_34
	JMP LBB1_35
LBB1_4:
    LONG $0xf8588d4c             // lea    r11, [rax - 8]
    WORD $0x894d; BYTE $0xde     // mov    r14, r11
    LONG $0x03eec149             // shr    r14, 3
    WORD $0xff49; BYTE $0xc6     // inc    r14
    WORD $0x214d; BYTE $0xf2     // and    r10, r14
    LONG $0x244c8b48; BYTE $0x08 // mov    rcx, qword [rsp + 8]
    LONG $0x20798d48             // lea    rdi, [rcx + 32]
    QUAD $0x00000000853c8d4c     // lea    r15, [4*rax]
    LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
    LONG $0x20c18348             // add    rcx, 32
    LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
    WORD $0x3145; BYTE $0xed     // xor    r13d, r13d
    LONG $0x244c8b4c; BYTE $0x10 // mov    r9, qword [rsp + 16]
	JMP LBB1_5
LBB1_27:
    LONG $0x246c8b4c; BYTE $0x20 // mov    r13, qword [rsp + 32]
    WORD $0xff49; BYTE $0xc5     // inc    r13
    WORD $0x014c; BYTE $0xff     // add    rdi, r15
    LONG $0x246c3b4c; BYTE $0x28 // cmp    r13, qword [rsp + 40]
	JE LBB1_37
LBB1_5:
    WORD $0x894c; BYTE $0xe9     // mov    rcx, r13
    LONG $0xc8af0f48             // imul    rcx, rax
    LONG $0x24548b48; BYTE $0x08 // mov    rdx, qword [rsp + 8]
    LONG $0x8a248d4c             // lea    r12, [rdx + 4*rcx]
    LONG $0x246c894c; BYTE $0x20 // mov    qword [rsp + 32], r13
    LONG $0xe8af0f4d             // imul    r13, r8
    LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
    WORD $0xc931                 // xor    ecx, ecx
	JMP LBB1_6
LBB1_26:
    WORD $0xff48; BYTE $0xc1     // inc    rcx
    WORD $0x014c; BYTE $0xfb     // add    rbx, r15
    WORD $0x394c; BYTE $0xc1     // cmp    rcx, r8
	JE LBB1_27
LBB1_6:
    LONG $0x29148d4a             // lea    rdx, [rcx + r13]
    LONG $0x24748b48; BYTE $0x38 // mov    rsi, qword [rsp + 56]
    LONG $0x187de2c4; WORD $0x9604 // vbroadcastss    ymm0, dword [rsi + 4*rdx]
    LONG $0x08fb8349             // cmp    r11, 8
	JAE LBB1_22
    WORD $0xd231                 // xor    edx, edx
	JMP LBB1_24
LBB1_22:
    WORD $0x894c; BYTE $0xd6     // mov    rsi, r10
    WORD $0xd231                 // xor    edx, edx
LBB1_23:
    LONG $0x4c10fcc5; WORD $0xe093 // vmovups    ymm1, yword [rbx + 4*rdx - 32]
    LONG $0xa87de2c4; WORD $0x974c; BYTE $0xe0 // vfmadd213ps    ymm1, ymm0, yword [rdi + 4*rdx - 32]
    LONG $0x4c11fcc5; WORD $0xe097 // vmovups    yword [rdi + 4*rdx - 32], ymm1
    LONG $0x0c10fcc5; BYTE $0x93 // vmovups    ymm1, yword [rbx + 4*rdx]
    LONG $0xa87de2c4; WORD $0x970c // vfmadd213ps    ymm1, ymm0, yword [rdi + 4*rdx]
    LONG $0x0c11fcc5; BYTE $0x97 // vmovups    yword [rdi + 4*rdx], ymm1
    LONG $0x10c28348             // add    rdx, 16
    LONG $0xfec68348             // add    rsi, -2
	JNE LBB1_23
LBB1_24:
    LONG $0x01c6f641             // test    r14b, 1
	JE LBB1_26
    WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
    LONG $0xf0af0f48             // imul    rsi, rax
    LONG $0xb1348d49             // lea    rsi, [r9 + 4*rsi]
    LONG $0x0c10fcc5; BYTE $0x96 // vmovups    ymm1, yword [rsi + 4*rdx]
    LONG $0xa875c2c4; WORD $0x9404 // vfmadd213ps    ymm0, ymm1, yword [r12 + 4*rdx]
    LONG $0x117cc1c4; WORD $0x9404 // vmovups    yword [r12 + 4*rdx], ymm0
	JMP LBB1_26
LBB1_37:
    SUBQ $8, SP
    VZEROUPPER
    RET
